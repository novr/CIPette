[build-system]
requires = [
    "setuptools>=61.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "cipette"
version = "0.1.0"
description = "CI/CD Insights Dashboard - Collect and visualize GitHub Actions workflow metrics"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "novr", email = "novr@example.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Monitoring",
]

dependencies = [
    "certifi>=2025.8.3",
    "flask>=3.0.0",
    "PyGithub>=2.1.1",
    "python-dotenv>=1.0.0",
    "requests>=2.32.5",
    "tomli-w>=1.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "ruff>=0.1.0",
    "python-semantic-release>=10.0.0",
]
test = [
    "pytest>=8.0.0",
]

[project.scripts]
cipette-collect = "cipette.collector:main"
cipette-web = "cipette.app:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["cipette*"]

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "B", "C4", "UP"]
ignore = ["E501"]  # Line too long (handled by formatter)

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests"
]

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "ruff>=0.13.2",
    "python-semantic-release>=10.4.1",
    "pip-audit>=2.9.0",
]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
build_command = "uv build"
dist_path = "dist"
upload_to_vcs_release = true
upload_to_pypi = false
upload_to_release = true
hvcs = "github"
remote = { name = "origin" }
branch = "main"
version_variable = "cipette/version.py:__version__"
commit_subject = "chore(release): {version} [skip ci]"
commit_message = "chore(release): {version} [skip ci]\n\nAutomatically generated by python-semantic-release"
tag_commit = true
major_on_zero = false
prerelease = false
prerelease_token = "rc"
prerelease_braches = ["pre-release", "alpha", "beta"]
build_commit_message = "build: {version} [skip ci]"
changelog_file = "CHANGELOG.md"
changelog_merge_defaults = true
changelog_merge_prerelease = false
changelog_merge_include = ["feat", "fix", "perf", "refactor", "docs", "style", "test", "build", "ci", "chore"]
changelog_merge_exclude = []
changelog_merge_commit_pattern = "^(?P<type>feat|fix|perf|refactor|docs|style|test|build|ci|chore)(\\((?P<scope>[^)]+)\\))?: (?P<message>.*)$"
changelog_merge_replacements = [
    { pattern = "^feat", replacement = "Features" },
    { pattern = "^fix", replacement = "Bug Fixes" },
    { pattern = "^perf", replacement = "Performance Improvements" },
    { pattern = "^refactor", replacement = "Code Refactoring" },
    { pattern = "^docs", replacement = "Documentation" },
    { pattern = "^style", replacement = "Code Style" },
    { pattern = "^test", replacement = "Tests" },
    { pattern = "^build", replacement = "Build System" },
    { pattern = "^ci", replacement = "Continuous Integration" },
    { pattern = "^chore", replacement = "Chores" },
]
changelog_merge_commit_parsers = [
    { pattern = "^(?P<type>feat)(\\((?P<scope>[^)]+)\\))?: (?P<message>.*)$", type = "feat" },
    { pattern = "^(?P<type>fix)(\\((?P<scope>[^)]+)\\))?: (?P<message>.*)$", type = "fix" },
    { pattern = "^(?P<type>perf)(\\((?P<scope>[^)]+)\\))?: (?P<message>.*)$", type = "perf" },
    { pattern = "^(?P<type>refactor)(\\((?P<scope>[^)]+)\\))?: (?P<message>.*)$", type = "refactor" },
    { pattern = "^(?P<type>docs)(\\((?P<scope>[^)]+)\\))?: (?P<message>.*)$", type = "docs" },
    { pattern = "^(?P<type>style)(\\((?P<scope>[^)]+)\\))?: (?P<message>.*)$", type = "style" },
    { pattern = "^(?P<type>test)(\\((?P<scope>[^)]+)\\))?: (?P<message>.*)$", type = "test" },
    { pattern = "^(?P<type>build)(\\((?P<scope>[^)]+)\\))?: (?P<message>.*)$", type = "build" },
    { pattern = "^(?P<type>ci)(\\((?P<scope>[^)]+)\\))?: (?P<message>.*)$", type = "ci" },
    { pattern = "^(?P<type>chore)(\\((?P<scope>[^)]+)\\))?: (?P<message>.*)$", type = "chore" },
]
